names(tab_m)<-paste("multvar_",names(tab_m),sep="")
}else{
fits <- lapply(complete_long, function(datt) coxph(frml_m, data = datt))
mod_mice <- pool(fits, dfcom = Inf)
sumsum<-summary(mod_mice)
# an<-Anova(mod_mice,2,test.statistic="Wald")
# p<-rep(an$P,times=an$Df)
# ind<-unlist(sapply(an$Df,FUN=function(x) 1:x))>1
# p[ind]<-NA
# if (any(rowSums(tab_m, na.rm=T)==0)){
#   na_rows <- which(rowSums(tab_m, na.rm=T)==0)
#   tab_m$p_global <- rep(NA, nrow(tab_m))
#   tab_m$p_global[c(1:nrow(tab_m))[!(c(1:nrow(tab_m)))%in%na_rows]] <- p
# }else{
#   tab_m$p_global<-p
# }
fit_coxph <- function(fit) {
list(coefficients = fit$coefficients, var = fit$var, df = length(fit$coefficients))
}
results <- lapply(fits, fit_coxph)
coefficients <- sapply(results, function(res) res$coefficients)
variances <- sapply(results, function(res) res$var)
dfs <- sapply(results, function(res) res$df)
### ??????????????
# Rubin's rules for pooling
m <- length(results)
if (!is.matrix(coefficients)){
coefficients <- matrix(coefficients, nrow=1)
}
pooled_coefficients <- rowMeans(coefficients)
if (!is.matrix(variances)){
variances <- matrix(variances, nrow=1)
}
within_variance <- matrix(rowMeans(variances),sqrt(nrow(variances)),sqrt(nrow(variances)))
#between_variance <- apply(coefficients, 1, var)
between_variance <- cov(t(coefficients))
total_variance <- within_variance + (1 + 1/m) * between_variance
pooled_se <- sqrt(diag(total_variance))
# Compute p-values
t_values <- pooled_coefficients / pooled_se
p_values <- 2 * (1 - pnorm(abs(t_values)))
chi2 <- pooled_coefficients%*%solve(total_variance)%*%pooled_coefficients
p_global <- 1 - pchisq(chi2, df=length(pooled_coefficients))
tab_mice <- data.frame("exp(coef)" = exp(sumsum$estimate),
"lower .95" = exp(sumsum$estimate - 1.96 * sumsum$std.error),
"upper .95" = exp(sumsum$estimate + 1.96 * sumsum$std.error),
"p" = sumsum$p.value,
"p_global" = p_global,
"n_patienten" = length(unique(complete_long[[1]]$patid)), #should be all bc imputed
"n_nieren" = length(unique(complete_long[[1]]$patid_date)), #[!is.na(complete_long[[1]][,x[i]])]
#??????????????????????????????????????????????????
"n_intervalle" = unique(mod_mice$glanced$n),
"n_events" = unique(mod_mice$glanced$nevent)
)
rownames(tab_mice) <- sumsum$term
names(tab_mice)[1:3] = c("exp(coef)", "lower .95", "upper .95")
names(tab_mice)[1]<-"HR"
names(tab_mice)<-paste("multvar_",names(tab_mice),sep="")
tab_m <- tab_mice
}
}else{ #coxphf_TF == TRUE
if (imput_missing == FALSE){
dat <- data[complete.cases(data[, x]), ]
mod_m<-coxphf(frml_m, data = dat, pl=FALSE)
sumsum<-summary(mod_m)
tab2<-as.data.frame(exp(sumsum$coefficients))
tab2$"lower .95"<-as.vector(sumsum$ci.lower)
tab2$"upper .95"<-as.vector(sumsum$ci.upper)
colnames(tab2)[1]<-"exp(coef)"
tab2$p<-sumsum$prob
#tab2$p_global[1]<-global_p
an<-Anova(mod_m,2,test.statistic="Wald")
p<-rep(an$P,times=an$Df)
ind<-unlist(sapply(an$Df,FUN=function(x) 1:x))>1
p[ind]<-NA
if (any(rowSums(tab2, na.rm=T)==0)){
na_rows <- which(rowSums(tab2, na.rm=T)==0)
tab2$p_global <- rep(NA, nrow(tab2))
tab2$p_global[c(1:nrow(tab2))[!(c(1:nrow(tab2)))%in%na_rows]] <- p
}else{
tab2$p_global<-p
}
tab2$n_patienten<-length(unique(data$patid[complete_dat]))
tab2$n_nieren<-length(unique(data$patid_date[complete_dat]))
tab2$n_Intervalle<-sumsum$n
tab2$n_events<-coxph(frml_m, data=dat)$nevent #gibt es nicht in coxphf, Anzahl der Events aber unverÃ¤ndert
names(tab2)[1]<-"HR"
names(tab2)<-paste("multvar_",names(tab2),sep="")
tab_m <- tab2
}else{
fits <- lapply(complete_long, function(datt) coxphf(frml_m, data = datt, pl=F))
fit_coxphf <- function(fit) {
list(coefficients = fit$coefficients, var = fit$var, df = fit$df)
}
results <- lapply(fits, fit_coxphf)
coefficients <- sapply(results, function(res) res$coefficients)
variances <- sapply(results, function(res) res$var)
dfs <- sapply(results, function(res) res$df)
# Rubin's rules for pooling
m <- length(results)
if (!is.matrix(coefficients)){
coefficients <- matrix(coefficients, nrow=1)
}
pooled_coefficients <- rowMeans(coefficients)
if (!is.matrix(variances)){
variances <- matrix(variances, nrow=1)
}
within_variance <- matrix(rowMeans(variances),sqrt(nrow(variances)),sqrt(nrow(variances)))
#between_variance <- apply(coefficients, 1, var)
between_variance <- cov(t(coefficients))
total_variance <- within_variance + (1 + 1/m) * between_variance
pooled_se <- sqrt(diag(total_variance))
# Compute p-values
t_values <- pooled_coefficients / pooled_se
p_values <- 2 * (1 - pnorm(abs(t_values)))
chi2 <- pooled_coefficients%*%solve(total_variance)%*%pooled_coefficients
p_global <- 1 - pchisq(chi2, df=length(pooled_coefficients))
tab_mice <- data.frame("exp(coef)" = exp(pooled_coefficients),
"lower .95" = exp(pooled_coefficients - 1.96 * pooled_se),
"upper .95" = exp(pooled_coefficients + 1.96 * pooled_se),
"p" = p_values,
"p_global" = p_global,
"n_patienten" = length(unique(complete_long[[1]]$patid)),
"n_nieren" = length(unique(complete_long[[1]]$patid_date)),
"n_intervalle" = fits[[1]]$n,
"n_events" = coxph(frml_m,data=complete_long[[1]])$nevent
)
names(tab_mice)[1:3] = c("exp(coef)", "lower .95", "upper .95")
#if(i!=1) rownames(tab_mice) <- x[i]
names(tab_mice)[1]<-"HR"
names(tab_mice)<-paste("multvar_",names(tab_mice),sep="")
tab_m <- tab_mice
}
}
print(tab_m)
tab_m
}
#data_in<-data
#x<-kovars_rel
#wrap(S,kovars_rel,data, coxphf_TF=coxphf_TF)
#coxphf=T
wrap<-function(S,x,data_in, coxphf_TF=FALSE) {
if(length(levels(data_in[,x[1]])) == 1){
return(NULL)
}else{
cbind(
fun_uni(S,x,data=data_in, coxphf_TF=coxphf_TF),
fun_uni(S,x,data=data_in,complete_case=TRUE, coxphf_TF=coxphf_TF),
fun_multi(S,x,data=data_in, coxphf_TF=coxphf_TF)
)
}
}
deskr_fun<-function(x,data,stat="mean_sd",z.grenz=4,r=1,r.proz=1) {
tab<-NULL
for(i in 1:length(x)) {
xx<-data[[x[i]]]
isna<-is.na(xx)
n<-length(xx)
valid<-sum(!isna)
miss<-sum(isna)
if(is.factor(xx) | is.character(xx) | length(unique(xx[!is.na(xx)]))<=z.grenz) {
xx<-as.factor(xx)
freq<-table(xx,useNA="no")
prop<-freq/sum(freq)
proz<-round(prop*100,r.proz)
a<-paste(freq,"(",proz,"%)",sep="")
tt<-data.frame(Variable=x[i],N=n,Valid=valid,Missing=miss,Level=names(prop),Stat="n (%)",Summary=a)
if(dim(tt)[1]>1) tt[-1,1:4]<-NA
} else {
if(stat=="mean_sd") {
a<-paste(round(mean(xx,na.rm=TRUE),r)," ? ",round(sd(xx,na.rm=TRUE),r),sep="")
sumnam<-"mean ? SD"
}
if(stat=="IQR") {
a<-paste(round(median(xx,na.rm=TRUE),r),
"(",round(quantile(xx,0.25,na.rm=TRUE),r),"-",
round(quantile(xx,0.75,na.rm=TRUE),r),")",sep="")
sumnam<-"median (Q1-Q3)"
}
if(stat=="range") {
a<-paste(round(median(xx,na.rm=TRUE),r),
"(",round(min(xx,na.rm=TRUE),r),"-",
round(max(xx,na.rm=TRUE),r),")",sep="")
sumnam<-"median (min-max)"
}
tt<-data.frame(Variable=x[i],N=n,Valid=valid,Missing=miss,Level="n.a.",Stat=sumnam,Summary=a)
}
tab<-rbind(tab,tt)
}
tab
}
# data=data
# event=data$event_overall
# eventname=outcome_namen[j]
# supp_name=immun_supp_name
# x=kovars=kovars_rel
# steps=seq(360,10*360,360)
stepwise_fun<-function(data,event,eventname="Transplant survival",supp_name="",kovars,steps=seq(360,5*360,360)) {
data$event<-event
result_list<-list()
for(i in 1:length(steps)) {
BL<-data[data$anfang==steps[i],]
imm<-kovars_rel[1]
BL[,imm] <- droplevels(BL[,imm])
S<-Surv(time=BL$max_zeit,event=BL$event)
result_list[[i]]<-wrap(S,x=kovars,data_in=BL, coxphf_TF = coxphf_TF)
if(length(result_list) != 0){
names(result_list)[[i]]<-paste("Year",steps[i]/360,sep="_")
#grafik immun supp bisher
pretty.km.plot(zeit=(BL$max_zeit)/360,event=BL$event,main="",
gruppe=BL$immuno_sup_bisher_kat,
legend_title=paste("Average previous immune suppresion",supp_name),
tickstep=1,atriskzeit=(steps[i]/360):15,
xlab="Years (360 days)",
ylab=eventname,
test=TRUE)
abline(v=steps[i]/360,lty=2)
}
}
#grafik immun supp aktuell
for(i in 1:length(steps)) {
BL<-data[data$anfang==steps[i],]
pretty.km.plot(zeit=(BL$max_zeit)/360,event=BL$event,main="",
gruppe=BL$immuno_sup_aktuell_kat,
legend_title=paste("Current immune suppression",supp_name),
tickstep=1,atriskzeit=(steps[i]/360):15,
xlab="Years (360 days)",
ylab=eventname,
test=TRUE)
abline(v=steps[i]/360,lty=2)
}
#print(result_list)
result_list
}
univar_BL_surv_fun<-function(data,event,eventname="Transplant survival") {
data$event<-event
BL<-data[data$anfang==360,]
km<-pretty.km.plot_uni(zeit=(BL$max_zeit)/360,event=BL$event,main="",
tickstep=1,atriskzeit=1:15,
xlab="Years (360 days)",
ylab=eventname,
conf.int=FALSE, mark.time=TRUE)
km
}
#
datum<-"17_07_2024_imputed"
setwd("T:\\Minim\\Daten_06.2022")
#setwd("C:\\Projekte\\Minim\\Daten_06.2022")
#data<-read.csv("data_finished_01_08_2022.csv")
data<-read.csv("data_finished_01_08_2022_KREA_NEW.csv") #new: Krea rules changed if value 4 NA
#testdat<-read.csv("data_finished_01_08_2022_KREA_NEW.csv")
length(unique(data$patid)) #843
length(unique(data$patid_date)) #848
# nur erste Niere in Studie berÃ¼cksichtigen -------------------------------------
library(data.table)
dt <- as.data.table(data)
dt[, ntx_date := as.Date(ntx_date)]
dt <- dt[, .SD[which.min(ntx_date)], by = patid]
dt[, .N, by = patid]
dt[, .N, by = patid_date]
data <- data[data$patid_date %in% dt$patid_date,]
length(unique(data$patid_date)) #843
# level carry over NAs to Zero --------------------------------------------------
data <- as.data.table(data)
immun_supp_scores<-c("level_calcineurin_inhibitors_carry_over" ,
"level_steroids_carry_over",
"level_mtor_inhibitors_carry_over","level_antiproliferative_agents_carry_over"
)
for (col in immun_supp_scores) {
data[is.na(get(col)), (col) := 0]
}
data<-as.data.frame(data)
# weitere Auswertung ------------------------------------------------------------
Y1<-data[data$anfang==360,]
length(unique(Y1$patid_date[is.na(Y1$is_scoreci_carry_over)]))
sum(is.na(Y1$is_scoreci_carry_over))
table(Y1$is_scoreci_carry_over)
vals <- function(x){
return(length(!is.na(x)))
}
sum(aggregate(Y1$is_scoreci_carry_over,list(as.factor(unique(Y1$patid_date))),FUN = vals)$x)
ord<-order(data$patid_date,data$anfang)
table(diff(ord)) #die Daten sind geordnet.
data$last_obs<-FALSE
data$last_obs[dim(data)[1]]<-TRUE
last_id<-data$patid_date[dim(data)[1]]
for(i in (dim(data)[1]-1):1) {
temp_id<-data$patid_date[i]
if(temp_id!=last_id) {
data$last_obs[i]<-TRUE
last_id<-temp_id
}
}
ids<-unique(data$patid_date) #still 830
data$max_zeit<-NA
for(id in ids) {
set<-data$patid_date==id
data$max_zeit[set]<-max(data$ende[set])
}
data$EP_TP_loss_or_death<-0
data$endpoint_final[is.na(data$endpoint_final)]<-"unknown"
data$EP_TP_loss_or_death[data$last_obs &
(data$endpoint_final=="Death_with_function" |data$endpoint_final=="Transplant_Loss")]<-1
#| data$niere_versagt==1 #dazu
#table(data$death,data$endpoint_final)
data$EP_death<-0
data$EP_death[data$last_obs & data$endpoint_final=="Death_with_function"]<-1
#table(data$EP_death,data$endpoint_final)
#table(data$death,data$endpoint_final)
data$EP_TP_loss<-0
data$EP_TP_loss[data$last_obs & data$endpoint_final=="Transplant_Loss"]<-1
#data[data$last_obs & (data$TP_loss!=data$niere_versagt),]
#table(data$TP_loss_or_death,data$niere_versagt,deparse.level=2)
data$sex_spender<-factor(tolower(data$sex_spender))
data$TP_loss<-as.numeric(data$endpoint_final=="Transplant_Loss")
data$TP_loss_or_death<-as.numeric(data$endpoint_final=="Transplant_Loss" | data$endpoint_final=="Death_with_function")
table(data$death,data$endpoint_final=="Death_with_function",useNA="always",deparse.level=2)
data$death<-as.numeric(data$endpoint_final=="Death_with_function")
#data0<-data
####
#test if EP_TP_loss and TP_loss are consistent etc.
test_data<-data[,c(names(data)[1:3],"last_obs")]
#do all pat have a last_obs?
length(unique(data$patid_date))
length(unique(data$patid_date[data$last_obs]))
achtachtsieben<-unique(data$patid_date) # neu 830
sum(is.na(data$endpoint_final)) #0
sum(data$EP_TP_loss) #79
sum(data$TP_loss[data$last_obs]) #79
sum(data$last_obs)
###
############ ## ## ## ## # # #
#immun_supp_scores<-names(data)[grepl("carry_over",names(data))]
immun_supp_scores<-c("level_calcineurin_inhibitors_carry_over" ,
"level_steroids_carry_over",
"is_scoreci_carry_over",
"level_mtor_inhibitors_carry_over","level_antiproliferative_agents_carry_over"
)
#
summary(data$is_scoreci_carry_over)
any(data$ende>data$days_observed_final)
all(data$ende<=data$days_observed_final)
spl<-strsplit(immun_supp_scores,split="_")
outcome_last<-c("EP_TP_loss","EP_TP_loss_or_death","EP_death")
colSums(data[,outcome_last])
outcome_overall<-c("TP_loss","TP_loss_or_death","death")
outcome_namen<-c("Transplant survival","Survival with active transplant","Overall survival")
colSums(data[,outcome_overall])
##
#Auswertung
nur_average<-TRUE
if(nur_average==FALSE) {
datum <- paste0("_AKTUELL_",datum)
#pfad<-"C:\\Projekte\\Minim\\Ergebnisse_4Aug"
pfad <- "T:\\Minim\\Ergebnisse_4Aug"
kovars_time_dep_metr<-c(
"immuno_sup_aktuell"#,
#"immuno_sup_bisher"
)
kovars_time_dep<-c(
"immuno_sup_aktuell_kat"#,
#"immuno_sup_bisher_kat"
)
kovars_time_dep_rel<-c(
"immuno_sup_aktuell_kat_rel"#,
#"immuno_sup_bisher_kat_rel"
)
} else {
datum <- paste0("_BISHER_",datum)
#pfad<-"C:\\Projekte\\Minim\\Ergebnisse_nur_average_score_4Aug"
pfad<-"T:\\Minim\\Ergebnisse_nur_average_score_4Aug"
kovars_time_dep_metr<-c(
#"immuno_sup_aktuell",
"immuno_sup_bisher")
kovars_time_dep<-c(
#"immuno_sup_aktuell_kat",
"immuno_sup_bisher_kat")
kovars_time_dep_rel<-c(
#"immuno_sup_aktuell_kat_rel",
"immuno_sup_bisher_kat_rel")
}
#kovars_konstant<-c("pralatest", "mm.gesamt","induktion.y.n.","sex_spender")
kovars_konstant<-c("pralatest", "mm.gesamt","induktion.y.n.","alter_bei_ntx","male.y.n.")
### add krea 4. Quartal to kovars_konstant
krea3 <- data[data$anfang == 180 ,c("patid_date", "lab_avg_krea")]
krea4 <- data[data$anfang == 270 ,c("patid_date", "lab_avg_krea")] #equals intervall 270-360 # if missing, last avaiable
krea5 <- data[data$anfang == 360 ,c("patid_date", "lab_avg_krea")]
#dim(krea3)
#dim(krea4)
#dim(krea5)
krea4$lab_avg_krea <- ifelse(is.na(krea4$lab_avg_krea), ifelse(is.na(krea5$lab_avg_krea), krea3$lab_avg_krea, krea5$lab_avg_krea), krea4$lab_avg_krea)
names(krea4) <- c("patid_date", "krea4")
krea_first_yr <- t(matrix(data[data$anfang <= 90*4 ,c("lab_avg_krea")], nrow=5))
krea_first_yr[is.na(krea_first_yr[,4]),]
data <- merge(data, krea4)
length(unique(data$patid_date))
kovars_konstant <- c(kovars_konstant, "krea4")
###
# Imput mean for missing values in kovars # not used, but use for number of missing values statistics
n_imputed <- NULL
data <- as.data.table(data)
# #var<-kovars_konstant[1]
# #summary(data[,..var])
for (var in kovars_konstant){
mean_per_person <- data[, .(mean_per_person = mean(.SD[[var]], na.rm = TRUE)), by = patid_date]
mean_ges <- mean(mean_per_person$mean_per_person, na.rm=T)
temp <- data.frame(n_imputed = data[, sum(is.na(.SD[[var]]))], n_pat_imputed = sum(data[, sum(is.na(.SD[[var]])), by = patid_date]$V1>0) )#, mean_imputed = mean_ges)
n_imputed <- rbind(n_imputed, temp)
#data[, (var) := fifelse(is.na(.SD[[var]]), mean_ges, .SD[[var]]), .SDcols = var]
}
rownames(n_imputed) <- kovars_konstant
write.xlsx(n_imputed, "T://Minim//Paper//imputed_numbers.xlsx", rowNames = T)
#summary(data[,..var])
###
#install.packages("mice")
# library(mice)
# test_mice_df <- data[,c("patid_date", "anfang", "ende", "pralatest", "mm.gesamt")]
# test_mice_df2 <- test_mice_df
# m_test <- mice(test_mice_df)
# m_test$imp$pralatest
#
# test_mice_df <- complete(m_test, 1) #get the different imputation runs
# test_mice_df3 <- complete(m_test, 2)
#
# test_mice_df2[180:200,]
# test_mice_df[180:200,]
# test_mice_df3[180:200,]
data0<-as.data.frame(data)
length(unique(data0$patid_date))
kovars<-c(kovars_time_dep,kovars_konstant)
kovars_rel<-c(kovars_time_dep_rel,kovars_konstant)
des_var<-c("endpoint_final"        ,                    "days_observed_final"    ,
#"tp_funct_end_of_observation.y.n.",
#"death.y.n."    ,  "EP_death",
"ntx_type"  ,                                "ntx_leiche"   ,
"ntx_count",                                 "praemptive_ntx" ,
"alter_bei_ntx"   ,                          "diabetes_pre_ntx" ,
"khk_pre_ntx"  ,                             "pralatest"  ,
"prahighest"   ,                             "mm.gesamt"  ,
"induktion.y.n."  ,                          "induktion_atg"  ,
"induktion_il2ra" ,                          "induktion_ias" ,
"alter_spender" ,                            "sex_spender",
"alter_bei_ntx","male.y.n." )
k<-3 #immun supp score (scoreci)
k<-5 #antiproliferative
j<-1 #outcome
k<-2 #steroids
j<-1
wb_na <- openxlsx::createWorkbook()
sheet_substanz <- "Substanzklassen_NA_per_Pat"
openxlsx::addWorksheet(wb_na, sheet_substanz)
sheet2 <- "Anzahl Pat pro Substanzklasse"
openxlsx::addWorksheet(wb_na, sheet2)
k<-3 #immun supp score (scoreci)
immun_supp_name<-spl[[k]][2]
immun_supp_name
pfad1<-paste(pfad,"\\",immun_supp_name,sep="")
print(pfad1)
if(!dir.exists(pfad1)) dir.create(pfad1)
setwd(pfad1)
j
immun_supp_scores
data0$immuno_sup_aktuell<-data0[[immun_supp_scores[k]]]
data0$immuno_sup_aktuell
summary(data0$immuno_sup_aktuell)
immun_supp_scores
S
frml
fmrl
fmlr
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
library(devtools)
library(roxygen2)
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower_17_07")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower1707")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower1707")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower_17_07/multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower_17_07/multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower_17_07/multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower_17_07/multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower_17_07/multPower")
build("C:\\multPower_17_07/multPower")
library(remotes)
remotes::install_github("BKroyer/multPower")
remove.packages("multPower")
remotes::install_github("BKroyer/multPower")
#install.packages("remotes")
library(remotes)
remotes::install_github("BKroyer/multPower")
library(multPower)
?sim_1
?n_max_t_test
#dann R Datei in Unterordner R kopieren
document("C:\\multPower_17_07/multPower")
library(devtools)
library(roxygen2)
#dann R Datei in Unterordner R kopieren
document("C:\\multPower_17_07/multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower_17_07/multPower")
build("C:\\multPower_17_07/multPower")
