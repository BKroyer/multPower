#F-Test
F_test<-function(est,V,N) {
k<-length(est)
#Hotelling:
stat<- (N-k-1)/(N-2)/k*est%*%solve(V,est)
df1<-k
df2<-N-1-k
p<-1-pf(stat,df1,df2)
data.frame(stat,df1,df2,p)
}
power_F_test<-function(n0,n1=n0,delta,K,alpha=0.05) {
VC<-K/n0+K/n1
ncp<-delta%*%solve(VC,delta)
k<-length(delta)
N<-n0+n1
df1<-k
df2<-N-1-k
Q<-qf(1-alpha,df1=df1,df2=df2)
power<-1-pf(Q,df1=df1,df2=df2,ncp=ncp)
data.frame(n0,n1,power)
}
n_F_test<-function(power=0.8,r=0.5,delta,K,alpha=0.05,interval=c(5,10000)) {
#r ist n1/N
#also n1=r*N
powfun<-function(N) {
n1<-r*N
n0<-(1-r)*N
pow<-power_F_test(n0,n1,delta,K,alpha)$power
pow-power
}
rt<-uniroot(powfun,interval)
N<-rt$root
n1<-r*N
n0<-(1-r)*N
data.frame(N,n0,n1,power=rt$f.root+power)
}
delta<-c(0.2,0.6)
K<-ARmat(1:2,rep(1,2),0.5)
alpha<-0.05
r<-2/3
nn<-n_F_test(power=0.8,r=r,delta=delta,K=K,alpha=alpha)
nn
power_F_test(n0=nn$n0,n1=nn$n1,delta=delta,K=K,alpha=alpha)
n0<-ceiling(nn$n0)
n1<-ceiling(nn$n1)
power_F_test(n0=n0,n1=n1,delta=delta,K=K,alpha=alpha)
R<-10000
p<-rep(NA,R)
for(i in 1:R) {
if(i%%100==0) {
print(i)
flush.console()
}
dat<-sim_1(i,n0=n0,n1=n1,delta=delta,K=K,wishart=TRUE)
p[i]<-F_test(dat$est,dat$V,dat$N)$p
}
mean(p<=alpha)
#   #
## ##
# # #
#   #
#   #
#Maximum Test
max_t_test<-function(est,V,N,sides=2) {
k<-length(est)
SE<-sqrt(diag(V))
z<-est/SE
df<-N-2
if(sides==2) {
stat<-rep(max(abs(z)),k)
p<-as.numeric(1-pmvt(lower=-stat,upper=stat,df=df,corr=cov2cor(V)))
}
if(sides==1) {
stat<-rep(max(z),k)
p<-as.numeric(1-pmvt(lower=rep(-Inf,k),upper=stat,df=df,corr=cov2cor(V)))
}
data.frame(stat=max(z),df,p,sides)
}
power_max_t_test<-function(n0,n1,delta,K,alpha=0.05,sides=2) {
VC<-K/n0+K/n1
SE<-sqrt(diag(VC))
ncp<-delta/SE
korrmat<-cov2cor(VC)
k<-length(delta)
N<-n0+n1
df<-N-2
if(sides==2) {
Q<-qmvt(1-alpha,mean=rep(0,k),corr=korrmat,df=df,tail="both.tails")$quantile
krit<-rep(Q,k)
power<-1-pmvt(lower=-krit,upper=krit,delta=ncp,corr=korrmat,df=df)
}
if(sides==1) {
Q<-qmvt(1-alpha,mean=rep(0,k),corr=korrmat,tail="lower.tail",df=df)$quantile
krit<-rep(Q,k)
power<-1-pmvt(lower=-Inf,upper=krit,delta=ncp,corr=korrmat,df=df)
}
data.frame(N,n0,n1,power,sides)
}
power_max_z_test<-function(n0,n1,delta,K,alpha=0.05,sides=2) {
VC<-K/n0+K/n1
SE<-sqrt(diag(VC))
ncp<-delta/SE
korrmat<-cov2cor(VC)
k<-length(delta)
N<-n0+n1
if(sides==2) {
Q<-qmvnorm(1-alpha,mean=rep(0,k),corr=korrmat,tail="both.tails")$quantile
krit<-rep(Q,k)
power<-1-pmvnorm(lower=-krit,upper=krit,mean=ncp,corr=korrmat)
}
if(sides==1) {
Q<-qmvnorm(1-alpha,mean=rep(0,k),corr=korrmat,tail="lower.tail")$quantile
krit<-rep(Q,k)
power<-1-pmvnorm(lower=-Inf,upper=krit,mean=ncp,corr=korrmat)
}
data.frame(N,n0,n1,power)
}
n_max_z_test<-function(power=0.8,r=0.5,delta,K,alpha=0.05,sides=2,interval=c(5,10000)) {
#r ist n1/N
#also n1=r*N
powfun<-function(N) {
n1<-r*N
n0<-(1-r)*N
pow<-power_max_z_test(n0,n1,delta,K,alpha,sides)$power
pow-power
}
rt<-uniroot(powfun,interval)
N<-rt$root
n1<-r*N
n0<-(1-r)*N
data.frame(N,n0,n1,power=rt$f.root+power)
}
n_max_t_test_1<-function(power=0.8,r=0.5,delta,K,alpha=0.05,sides=2,interval=c(5,10000)) {
#r ist n1/N
#also n1=r*N
powfun<-function(N) {
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_max_t_test(n0,n1,delta,K,alpha,sides)$power
pow-power
}
N<-uniroot(powfun,interval)$root
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
data.frame(N=n0+n1,n0,n1,power)
}
n_max_t_test<-function(power=0.8,r=0.5,delta,K,alpha=0.05,sides=2,interval=c(5,10000)) {
#r ist n1/N
#also n1=r*N
#Startwerte
n_start<-n_max_z_test(power,r,delta,K,alpha,sides,interval)
N<-ceiling(n_start$N)
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_max_t_test(n0,n1,delta,K,alpha,sides)$power
while(pow<power) {
N<-N+1
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_max_t_test(n0,n1,delta,K,alpha,sides)$power
}
data.frame(N=n0+n1,n0,n1,power=pow,sides=sides)
}
power_max_t_test(n0,n1,delta,K,alpha,sides=2)
power_max_t_test(n0,n1,delta,K,alpha/2,sides=1)
delta<-c(0.2,0.6)
K<-ARmat(1:2,rep(1,2),0.5)
alpha<-0.05
r<-1/4
n_max_z_test(power=0.8,r=r,delta=delta,K=K,alpha=alpha)
nn<-n_max_t_test(power=0.8,r=r,delta=delta,K=K,alpha=alpha)
nn
power_max_t_test(n0=nn$n0,n1=nn$n1,delta=delta,K=K,alpha=alpha)
n0<-nn$n0
n1<-nn$n1
R<-10000
p<-rep(NA,R)
for(i in 1:R) {
if(i%%100==0) {
print(i)
flush.console()
}
dat<-sim_1(i,n0=n0,n1=n1,delta=delta,K=K,wishart=TRUE)
p[i]<-max_t_test(dat$est,dat$V,dat$N)$p
}
mean(p<=alpha)
####
#
####
#
####
#Summen Test (O'Brien)
sum_t_test<-function(est,V,N,dftype=c("OBrien","Logan")[1],sides=2) { #OBrien OLS
SE<-sqrt(diag(V))
z<-est/SE
stat<-sum(z)/sqrt(sum(cov2cor(V)))
k<-length(est)
if(dftype=="OBrien") df=N-2*k
if(dftype=="Logan") df=0.5*(N-2)*(1-1/k^2)
if(sides==2) p<-2*(1-pt(abs(stat),df))
#one-sided
if(sides==1) p<-1-pt(stat,df)
data.frame(stat,df=df,p,sides)
}
power_sum_t_test<-function(n0,n1,delta,K,alpha=0.05,sides=2,dftype=c("OBrien","Logan")[1]) {
VC<-K/n0+K/n1
SE<-sqrt(diag(VC))
z<-delta/SE
korrmat<-cov2cor(VC)
ncp<-abs(sum(z)/sqrt(sum(korrmat)))
k<-length(delta)
N<-n0+n1
if(dftype=="OBrien") df=N-2*k
if(dftype=="Logan") df=0.5*(N-2)*(1-1/k^2)
if(sides==2) {
krit<-qt(1-alpha/2,df=df)
power<-1-pt(krit,ncp=ncp,df=df)
}
if(sides==1) {
krit<-qt(1-alpha,df=df)
power<-1-pt(krit,ncp=ncp,df=df)
}
data.frame(n0,n1,power,sides)
}
n_sum_z_test<-function(power=0.8,r=0.5,delta,K,alpha=0.05,sides=2) {
#r ist n1/N
#also n1=r*N
VC_1<-K*(1/(1-r)+1/r)
SE1<-sqrt(diag(VC_1))
korrmat<-cov2cor(VC_1)
ncp1<-abs(sum(delta/SE1)/sqrt(sum(korrmat)))
if(sides==1) krit<-qnorm(1-alpha)
if(sides==2) krit<-qnorm(1-alpha/2)
N<-(krit+qnorm(power))^2/ncp1^2
n1<-r*N
n0<-(1-r)*N
data.frame(N,n0,n1,power=power)
}
n_sum_t_test<-function(power=0.8,r=0.5,delta,K,alpha=0.05,sides=2,dftype=c("OBrien","Logan")[1]) {
#r ist n1/N
#also n1=r*N
n_start<-n_sum_z_test(power,r,delta,K,alpha,sides)
N<-ceiling(n_start$N)
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_sum_t_test(n0,n1,delta,K,alpha,sides)$power
while(pow<power) {
N<-N+1
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_sum_t_test(n0,n1,delta,K,alpha,sides,dftype)$power
}
data.frame(N=n0+n1,n0,n1,power=pow,sides=sides)
}
power_sum_t_test(n0,n1,delta,K,alpha,sides=2)
power_sum_t_test(n0,n1,delta,K,alpha/2,sides=1)
delta<-c(0.2,0.6)
K<-ARmat(1:2,rep(1,2),0.5)
alpha<-0.05
r<-1/4
n_sum_z_test(power=0.8,r=r,delta=delta,K=K,alpha=alpha)
nn<-n_sum_t_test(power=0.8,r=r,delta=delta,K=K,alpha=alpha)
nn
power_sum_t_test(n0=nn$n0,n1=nn$n1,delta=delta,K=K,alpha=alpha)
n0<-nn$n0
n1<-nn$n1
R<-10000
p<-rep(NA,R)
for(i in 1:R) {
if(i%%100==0) {
print(i)
flush.console()
}
dat<-sim_1(i,n0=n0,n1=n1,delta=delta,K=K,wishart=TRUE)
p[i]<-sum_t_test(dat$est,dat$V,dat$N)$p
}
mean(p<=alpha)
#####
#
#
#
#
t_test<-function(est,variance,N,sides=2) {
SE<-sqrt(variance)
z<-est/SE
df=N-2
if(sides==2) p<-2*(1-pt(abs(stat),df))
if(sides==1) p<-1-pt(stat,df)
data.frame(stat,df=df,p,sides)
}
power_t_test<-function(n0,n1,delta,sd_per_group,alpha=0.05,sides=2) {
K<-sd_per_group^2
v<-K/n0+K/n1
SE<-sqrt(v)
z<-delta/SE
ncp<-abs(z)
N<-n0+n1
df=N-2
if(sides==2) {
krit<-qt(1-alpha/2,df=df)
power<-1-pt(krit,ncp=ncp,df=df)
}
if(sides==1) {
krit<-qt(1-alpha,df=df)
power<-1-pt(krit,ncp=ncp,df=df)
}
data.frame(n0,n1,power)
}
power_t_test(20,20,3,5,0.05)
power.t.test(n=20,delta=3,sd=5,sig.level=0.05)
power_t_test(20,20,3,5,0.05,1)
power.t.test(n=20,delta=3,sd=5,sig.level=0.05,alternative="one.sided")
power_t_test(20,30,3,5,0.05) #ok
n_z_test<-function(power=0.8,r=0.5,delta,sd_per_group,alpha=0.05,sides=2) {
K<-sd_per_group^2
v_1<-K*(1/(1-r)+1/r)
SE1<-sqrt(v_1)
ncp1<-abs(delta/SE1)
if(sides==1) krit<-qnorm(1-alpha)
if(sides==2) krit<-qnorm(1-alpha/2)
N<-(krit+qnorm(power))^2/ncp1^2
n1<-r*N
n0<-(1-r)*N
data.frame(N,n0,n1,power=power)
}
n_z_test(0.8,0.5,3,5)
n_z_test(0.8,0.5,3,5,alpha=0.025,1)
n_t_test<-function(power=0.8,r=0.5,delta,sd_per_group,alpha=0.05,sides=2) {
#r ist n1/N
#also n1=r*N
n_start<-n_z_test(power,r,delta,sd_per_group,alpha,sides)
N<-ceiling(n_start$N)
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_t_test(n0,n1,delta,sd_per_group,alpha,sides)$power
while(pow<power) {
N<-N+1
n1<-ceiling(r*N)
n0<-ceiling((1-r)*N)
pow<-power_t_test(n0,n1,delta,sd_per_group,alpha,sides)$power
}
data.frame(N=n0+n1,n0,n1,power=pow)
}
n_t_test(0.8,0.5,3,5)
power.t.test(power=0.8,delta=3,sd=5,sig.level=0.05)
n_z_test(0.8,1/3,3,5)
n_t_test(0.8,1/3,3,5) #ok
n_t_test(0.8,1/4,1,5) #ok
power_t_test(ceiling(100/3),ceiling(100/3*2),3,5,0.05)
library(devtools)
library(roxygen2)
create("T:\\mmrm_simulationen\\R_Paket_Compilieren_test")
create("T:\\mmrm_simulationen\\Compilierentest")
#create("C:\\RPAKET_multPower\\multPower")
create("T:\\mmrmcomp_test")
#create("C:\\RPAKET_multPower\\multPower")
create("T:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
?pmtv
R.version()
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest2")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest2")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
rm(list = c("F_test", "max_t_test", "n_F_test", "n_max_t_test", "n_sum_t_test", "power_F_test", "power_max_t_test", "power_sum_t_test", "sim_1", "sum_t_test"))
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\mmrmcomptest")
#dann R Datei in Unterordner R kopieren
document("C:\\mmrmcomptest")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\mmrmcomptest")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
#create("C:\\RPAKET_multPower\\multPower")
create("C:\\multPower")
#dann R Datei in Unterordner R kopieren
document("C:\\multPower")
#Dann DESCRIPTION und NAMESPACE bearbeiten
check("C:\\multPower")
build("C:\\multPower")
usethis::use_git_config(user.name = "Bettina Kroyer", user.email = "bettina.kroyer@tuwien.ac.at")
usethis::use_git()
usethis::use_git()
getcd()
getcw()
getcdw()
getwd()=
)
getwd()
setwd("C:/multPower")
usethis::use_git()
remove.packages("multPower")
githubinstall("multPower")
install.packages("githubinstall")
library(githubinstall)
githubinstall("multPower")
library(remotes)
remotes::install_github("BKroyer/multPower")
library(multPower)
remove.packages("multPower")
library(githubinstall)
?githubinstall
gh_install_packages("multPower")
gh_suggest("multPower")
gh_list_packages(username = "BKroyer")
remotes::install_github("BKroyer/multPower")
library(multPower)
remotes::install_github("BKroyer/multPower")
library(multPower)
